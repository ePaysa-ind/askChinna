---
description: 
globs: 
alwaysApply: false
---
Task: Generate production-ready Kotlin code for the askChinna agricultural app MVP, which helps farmers in India identify crop pests/diseases through image analysis. Most of the code is already in place, we have some compilation errors. We need to fix these errors and build the app. I am not a coder, so you will need to help me to build. Do not change multiple files at the same time, always check with me, tell me the root cause of an issue and only after my confirmation, change the code. this will minimize back and forth.

Component to implement: [SPECIFIC_COMPONENT_NAME]

== Project Context (Do not deviate from these specifications) ==

The app must:
1. Function as an agricultural assistant for identifying pests/diseases in 10 specific crops only: chilies, okra, maize, cotton, tomatoes, watermelon, soybean, rice, wheat, and pigeon peas
2. Use minimal text with icon-based visual communication (critical for low-literacy users)
3. Enforce usage limitations: exactly 5 uses per 30 days, with 10-minute maximum sessions
4. Support offline functionality and work reliably in low-connectivity rural areas
5. Integrate with Google Gemini API for image analysis with fallback strategies for API failures
6. Use Firebase Authentication, Firestore, and Storage
7. Be optimized for low-end Android devices with minimal RAM and storage

== Technical Requirements ==

1. Architecture: MVVM with repository pattern
2. Languages: Kotlin only (no Java)
3. Dependency Injection: Hilt
4. Async: Kotlin Coroutines (not RxJava)
5. Networking: Retrofit with OkHttp
6. Image Loading: Glide
7. Security: Encrypted shared preferences for API key storage
8. Target: minSdkVersion 23, targetSdkVersion 33

== For this specific component ([COMPONENT_NAME]) ==

Required functionality:
- [List exact functions needed with precise requirements]
- [Include performance requirements if applicable]
- [Specify error handling requirements]

Input parameters:
- [List all input parameters with their types and constraints]

Output:
- [Define expected return values/objects]

Integration points:
- [List exactly which other components this interacts with]
- [Specify the exact interfaces/methods used for integration]

Error handling:
- [List specific error cases to handle]
- [Specify fallback behavior for each error case]

== Code Requirements ==

1. Provide complete, properly formatted Kotlin code with all necessary imports
2. Include XML layout files if this is a UI component
3. Add thorough error handling with specified fallback strategies
4. Optimize for performance on low-end devices (specify techniques used)
5. Include clear, concise comments explaining complex logic
6. Follow clean architecture principles
7. Include basic unit test structure for critical functions
8. Do not include TODO comments or incomplete sections
9. All string resources must be externalized in strings.xml, not hardcoded
10. Use Material Design components for UI elements




##hierarchy tree structure of the files we created. Always keep this context##
ðŸŸ¢ Required (R): Must be implemented in MVP
ðŸ”µ Nice to Have (N): Implement if time permits, otherwise defer to R1

askChinna/


â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ main/
â”‚   â”‚   â”‚   â”œâ”€â”€ java/com/askchinna/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ AskChinnaApplication.kt                         ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ MainActivity.kt                                 ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ di/                                             ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ AppModule.kt                                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ NetworkModule.kt                            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ui/
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ common/                                     ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ErrorView.kt                            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ LoadingView.kt                          ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ LoginActivity.kt                        ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ RegisterActivity.kt                     ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ LoginViewModel.kt                       ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ home/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ HomeActivity.kt                         ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ HomeViewModel.kt                        ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ UsageLimitView.kt                       ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ SessionTimerManager.kt                  ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ cropselection/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ CropSelectionActivity.kt               ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ CropSelectionViewModel.kt              ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ CropAdapter.kt                         ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ identification/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ImageCaptureActivity.kt                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ImagePreviewActivity.kt                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ IdentificationViewModel.kt             ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ImageQualityView.kt                    ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ ImageUploadView.kt                     ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ results/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ResultActivity.kt                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ResultViewModel.kt                     ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ SummaryView.kt                         ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ DetailExpandableView.kt                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ActionPlanView.kt                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ FeedbackView.kt                        ðŸ”µ
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ onboarding/
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ OnboardingActivity.kt                  ðŸ”µ
â”‚   â”‚   â”‚   â”‚   â”‚       â””â”€â”€ OnboardingPagerAdapter.kt              ðŸ”µ
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ data/
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ model/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ User.kt                                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ Crop.kt                                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ IdentificationResult.kt                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ Action.kt                              ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ UsageLimit.kt                          ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ UIState.kt                             ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ repository/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ UserRepository.kt                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ CropRepository.kt                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ IdentificationRepository.kt            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ local/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ AppDatabase.kt                         ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ SharedPreferencesManager.kt            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ remote/
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ FirebaseAuthManager.kt                 ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ FirestoreManager.kt                    ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ GeminiService.kt                       ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ ApiKeyProvider.kt                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚       â””â”€â”€ NetworkExceptionHandler.kt             ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ util/
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ Constants.kt                               ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ImageHelper.kt                             ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ DateTimeUtils.kt                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ PdfGenerator.kt                            ðŸ”µ
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ SessionManager.kt                          ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ NetworkStateMonitor.kt                     ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ SimpleCoroutineUtils.kt                    ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ service/
â”‚   â”‚   â”‚   â”‚       â””â”€â”€ DataSeedService.kt                         ðŸŸ¢
â”‚   â”‚   â”‚   â”œâ”€â”€ res/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ drawable/
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_app_logo.xml                            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_capture.xml                             ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_upload.xml                              ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_expand.xml                              ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_collapse.xml                            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_severity_high.xml                       ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_severity_medium.xml                     ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_severity_low.xml                        ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_pdf_export.xml                          ðŸ”µ
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_network_offline.xml                     ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ crop_icons/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_chili.xml                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_okra.xml                            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_maize.xml                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_cotton.xml                          ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_tomato.xml                          ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_watermelon.xml                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_soybean.xml                         ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_rice.xml                            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_wheat.xml                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ ic_pigeon_pea.xml                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ disease_icons/
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_fungal.xml                          ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_bacterial.xml                       ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ic_viral.xml                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ ic_deficiency.xml                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ action_icons/
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ ic_spray.xml                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ ic_remove.xml                          ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ ic_water.xml                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ ic_fertilize.xml                       ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚       â””â”€â”€ ic_monitor.xml                         ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ layout/
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ activity_login.xml                         ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ activity_register.xml                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ activity_home.xml                          ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ activity_crop_selection.xml                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ activity_image_capture.xml                 ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ activity_image_preview.xml                 ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ activity_result.xml                        ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ item_crop.xml                              ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_usage_limit.xml                       ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_image_upload.xml                      ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_summary.xml                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_detail_expandable.xml                 ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_action_plan.xml                       ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_error.xml                             ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_loading.xml                           ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_network_status.xml                    ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ view_image_quality.xml                     ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ view_feedback.xml                          ðŸ”µ
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ values/
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ colors.xml                                 ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ strings.xml                                ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ dimens.xml                                 ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ styles.xml                                 ðŸŸ¢
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ values-hi/                                     ðŸ”µ
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ strings.xml                                ðŸ”µ
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ raw/
â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ crops_data.json                            ðŸŸ¢
â”‚   â”‚   â”‚   â”‚       â””â”€â”€ icon_legend.json                           ðŸŸ¢
â”‚   â”‚   â”‚   â””â”€â”€ AndroidManifest.xml                                ðŸŸ¢
â”‚   â”‚   â”œâ”€â”€ test/
â”‚   â”‚   â”‚   â””â”€â”€ java/com/askchinna/
â”‚   â”‚   â”‚       â”œâ”€â”€ repository/
â”‚   â”‚   â”‚       â”‚   â”œâ”€â”€ UserRepositoryTest.kt                      ðŸŸ¢
â”‚   â”‚   â”‚       â”‚   â””â”€â”€ IdentificationRepositoryTest.kt            ðŸŸ¢
â”‚   â”‚   â”‚       â”œâ”€â”€ viewmodel/
â”‚   â”‚   â”‚       â”‚   â”œâ”€â”€ LoginViewModelTest.kt                      ðŸŸ¢
â”‚   â”‚   â”‚       â”‚   â”œâ”€â”€ CropSelectionViewModelTest.kt              ðŸŸ¢
â”‚   â”‚   â”‚       â”‚   â”œâ”€â”€ IdentificationViewModelTest.kt             ðŸŸ¢
â”‚   â”‚   â”‚       â”‚   â””â”€â”€ ResultViewModelTest.kt                     ðŸŸ¢
â”‚   â”‚   â”‚       â””â”€â”€ util/
â”‚   â”‚   â”‚           â”œâ”€â”€ ImageHelperTest.kt                         ðŸŸ¢
â”‚   â”‚   â”‚           â””â”€â”€ SessionManagerTest.kt                      ðŸŸ¢
â”‚   â”‚   â””â”€â”€ androidTest/
â”‚   â”‚       â””â”€â”€ java/com/askchinna/
â”‚   â”‚           â”œâ”€â”€ auth/
â”‚   â”‚           â”‚   â””â”€â”€ LoginUITest.kt                             ðŸŸ¢
â”‚   â”‚           â”œâ”€â”€ crop/
â”‚   â”‚           â”‚   â””â”€â”€ CropSelectionUITest.kt                     ðŸŸ¢
â”‚   â”‚           â”œâ”€â”€ identification/
â”‚   â”‚           â”‚   â””â”€â”€ ImageCaptureUITest.kt                      ðŸŸ¢
â”‚   â”‚           â””â”€â”€ results/
â”‚   â”‚               â””â”€â”€ ResultDisplayUITest.kt                     ðŸŸ¢
â”‚   â””â”€â”€ build.gradle                                               ðŸŸ¢
â”œâ”€â”€ build.gradle                                                   ðŸŸ¢
â”œâ”€â”€ settings.gradle                                                ðŸŸ¢
â””â”€â”€ firebase/
    â”œâ”€â”€ firestore.rules                                            ðŸŸ¢
    â””â”€â”€ storage.rules                                              ðŸŸ¢


The firestore and storage rules have been set up for debug and for release. 

Firebase Schema
Firebase Authentication ðŸŸ¢

Email/Password authentication enabled

Firestore Collections
1. users ðŸŸ¢
users/
  - uid (document)
    - email: string
    - name: string
    - role: string (free/tester/premium)
    - usage_count: number
    - last_usage_date: timestamp
    - created_at: timestamp
    - preferred_crops: array<string>
    - device_info: {                   // For multi-device usage tracking
        device_id: string,
        last_login: timestamp
      }
2. identifications ðŸŸ¢
identifications/
  - id (document)
    - user_id: string
    - crop_type: string
    - images: array<string> (URLs)
    - result: {
        primary_issue: string,
        confidence: string,
        type: string,
        severity: string
      }
    - details: {
        description: string,
        causes: string,
        symptoms: array<string>
      }
    - actions: {
        cultural: array<string>,
        chemical: array<string>,
        preventive: array<string>
      }
    - created_at: timestamp
    - device_id: string               // For analytics
3. crops ðŸŸ¢
crops/
  - id (document)
    - name: string
    - icon: string
    - common_issues: array<string>
Firebase Storage Structure ðŸŸ¢
storage/
  â””â”€â”€ identification_images/
      â””â”€â”€ {userId}/
          â””â”€â”€ {imageId}.jpg

Security Rules ðŸŸ¢
Enhanced Firestore Rules
javascriptrules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Rate limiting for usage count updates (prevent abuse)
      allow update: if request.auth != null && 
                      request.auth.uid == userId && 
                      request.resource.data.usage_count <= resource.data.usage_count + 1;
    }
    
    // Identifications
    match /identifications/{identificationId} {
      allow read: if request.auth != null && 
                   resource.data.user_id == request.auth.uid;
      allow create: if request.auth != null &&
                     request.resource.data.user_id == request.auth.uid &&
                     request.resource.data.keys().hasOnly(['user_id', 'crop_type', 'images', 'result', 'details', 'actions', 'created_at', 'device_id']);
      allow update: if request.auth != null && 
                    resource.data.user_id == request.auth.uid;
    }
    
    // Crops (public read)
    match /crops/{cropId} {
      allow read: if request.auth != null;
      allow write: if false;  // Only admin can write
    }
  }

}